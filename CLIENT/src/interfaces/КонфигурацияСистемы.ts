import { ТаблицаВБД } from '@/РаботаСМодельюБД';
import type { DefineComponent } from 'vue';

interface НастройкаПоля {
    Имя: string;
    Заголовок?: string;
    Стили?: string;
    Атрибуты?: string;
    ТаблицаВнешнегоКлюча?: КонфигурацияСущности;
    ОбработчикПослеЗаполненияВнешнегоКлюча?: ((ВыбранныеДанные: any, ДанныеЗаполнения: any) => void);
}

interface Представление {
    Компонента: DefineComponent<any, any, any>;
    Заголовок: string | ((data: any) => string);
    НастройкаПолей?: НастройкаПоля[];

}

interface ДопПоле {
    Поле: string;
    Связь?: string;
    Обработка?: ((Данные: any) => any);
    Таблица?: string;
}

interface ПодчиненнаяТаблица {
    Таблица: КонфигурацияСущности;
    КлючГлавнойТаблицы: string;
    КолонкаСВнешнимКлючемВПодчиненнойТаблице: string;
    ДопПоля?: ДопПоле[];
    ПредставлениеСписка: Представление;
}

/**
 * Любые данные сущности. Если сущность связана с базой данных, то это результат запроса из базы данных.
 * На основании ДанныеСущности реактивно формируется форма.
 */
export interface ДанныеСущности {
    id: number;
    [key: string]: any;
}

/**
 * Сущность это абстрактный компонент системы. н.п. он может отражать часть предметной области (приобретение товаров) или какой-то служебный диалог и т.п. 
 * Сущность может быть связана с БД, тогда надо в свойстве ТаблицаБД указать связь с таблицей БД.
 * А может не быть связана, тогда указывается только представление списка или элемента (представление реализовывает компонент (понятие из vue))
 */
export interface КонфигурацияСущности {
    Имя: string,
    ТаблицаБД?: ТаблицаВБД,
    ПредставлениеСписка: Представление,
    ПредставлениеЭлемента: Представление,
    ДопПоля?: ДопПоле[],
    ПодчиненныеТаблицы?: ПодчиненнаяТаблица[];
}
