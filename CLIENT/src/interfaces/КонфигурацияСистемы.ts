import { ТаблицаВБД } from '@/РаботаСМодельюБД';
import type { DefineComponent } from 'vue';
import type { ТипыЭлемента } from '@/interfaces/КонфигурацияИнтерфейса';

interface НастройкаПоля {
    Имя: string;
    Заголовок?: string;
    Стили?: string;
    Атрибуты?: string;
    ТаблицаВнешнегоКлюча?: КонфигурацияСущности;
    /**
     * В этом обработчике заполняются поля связанные по смыслу с выбранным значением
     * ВыбранныеДанные - выбранное значение (одной значение)
     * ДанныеЗаполнения - Структура данных из которых было выбрано значение н.п. "(ВыбраннаяНоменклатура, ДанныеДиалога) => { ДанныеДиалога.ПредставлениеНоменклатуры = ВыбраннаяНоменклатура.name; }"
     */
    ОбработчикПослеЗаполненияВнешнегоКлюча?: ((ВыбранныеДанные: any, ДанныеЗаполнения: any) => void);
    Тип?: ТипыЭлемента;
    /**
     * После нажатия enter
     * Данные - данные формы или строки табличной части
     */
    ОбработчикЗавершениеРедактированияЭлемента?: (Данные: any) => void;
}

interface Представление {
    Компонента: DefineComponent<any, any, any>;
    Заголовок: string | ((data: any) => string);
    НастройкаПолей?: НастройкаПоля[];

}

interface ДопПоле {
    /**
     * Любое имя поля н.п. "table.id"
     */
    Поле: string;
    /**
     * условие связи, подставляется в left join н.п. "id = table.id"
     * Связь не обязательная т.к. поле может быть вычисляемым на основании существующих, не из внешних таблиц.
     */
    Связь?: string;
    /**
     * функция для вычисляемых полей 
     * н.п. "Обработка: ЗначениеПоля => ЗначениеПоля" 
     * или "Обработка: (ЗначениеПоля) => {return ЗначениеПоля.toUpper()}"
     * или "Обработка: (ЗначениеПоля, ЗначениеСтроки) => {return ЗначениеПоля = ЗначениеСтроки.Цена * ЗначениеСтроки.Сумма}"
     */
    Обработка?: ((ДанныеПоле: any, ДанныеСтроки: any) => any);
    /**
     * Соединяемая таблица. Если не указано, таблица будет взята из условия связи. Явно надо указывать если в условии связи используется псевдоним.
     */
    Таблица?: string;

    Заголовок?: string;
}

interface ПодчиненнаяТаблица {
    Таблица: КонфигурацияСущности;
    КлючГлавнойТаблицы: string;
    КолонкаСВнешнимКлючемВПодчиненнойТаблице: string;
    ДопПоля?: ДопПоле[];
    ПредставлениеСписка: Представление;
}

/**
 * Любые данные сущности. Если сущность связана с базой данных, то это результат запроса из базы данных.
 * На основании ДанныеСущности реактивно формируется форма.
 */
export interface ДанныеСущности {
    id: number;
    [key: string]: any;
}

/**
 * Сущность это абстрактный компонент системы. н.п. он может отражать часть предметной области (приобретение товаров) или какой-то служебный диалог и т.п. 
 * Сущность может быть связана с БД, тогда надо в свойстве ТаблицаБД указать связь с таблицей БД.
 * А может не быть связана, тогда указывается только представление списка или элемента (представление реализовывает компонент (понятие из vue))
 */
export interface КонфигурацияСущности {
    Имя: string,
    ТаблицаБД?: ТаблицаВБД,
    ПредставлениеСписка: Представление,
    ПредставлениеЭлемента?: Представление,
    ДопПоля?: ДопПоле[],
    ПодчиненныеТаблицы?: ПодчиненнаяТаблица[];
}
