const ТипыКолонок = {
    INTEGER: 'INTEGER',
    NUMERIC: 'NUMERIC',
    NUMERIC_ТОЧНОСТЬ: (ЦелаяЧасть, ДробнаяЧасть) => { return `NUMERIC(${ЦелаяЧасть},${ДробнаяЧасть})` },
    TEXT: 'TEXT',
}

const ДействияПриИзмененииГлавнойВнешнейТаблицы = {
    НетДействия: "NO ACTION",
    Ограничевать: "RESTRICT",

}

class Колонка {

    _Тип = '';
    _Имя = '';
    _ПризнакНеNull = false;
    _ЗначениеПоУмолчанию = "";
    _ПризнакЭтоПервичныйКлюч = false;
    _ДанныеВнешнегоКлюча = {
        ПризнакВнешегоКлюча: false,
        ВнешняяТаблица: undefined,
        КлючВнешнейТаблицы: undefined,
        ДействиеПриОбновлении: ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия,
        ДействиеПриУдалении: ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия,
        ДействиеССуществующимиЗаписями: "NOT VALID",
    }

    constructor(Имя) {
        this._Имя = Имя;
    }

    Тип(Тип) {
        this._Тип = Тип;

        return this;
    }

    НеNull(Признак = true) {
        this._ПризнакНеNull = Признак;
        return this;
    }

    ПоУмолчанию(ЗначениеПоУмолчанию) {
        this._ЗначениеПоУмолчанию = ЗначениеПоУмолчанию;
        return this;
    }

    ЭтоПервичныйКлюч(ЭтоПервичныйКлюч = true) {
        this._ПризнакЭтоПервичныйКлюч = ЭтоПервичныйКлюч;
        return this;
    }

    ЭтоВнешнийКлюч(
        ЭтоВнешнийКлюч = true,
        ВнешняяТаблица = undefined,
        КлючВнешнейТаблицы = undefined,
        ДействиеПриОбновленииЗаписейВнешнейТаблицы = ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия,
        ДействиеПриУдаленииЗаписейВнешнейТаблицы = ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия,
        ДействиеССуществующимиЗаписями = "NOT VALID"
    ) {
        this._ДанныеВнешнегоКлюча.ПризнакВнешегоКлюча = ЭтоВнешнийКлюч;
        this._ДанныеВнешнегоКлюча.ВнешняяТаблица = ВнешняяТаблица._Имя;
        this._ДанныеВнешнегоКлюча.КлючВнешнейТаблицы = КлючВнешнейТаблицы;
        this._ДанныеВнешнегоКлюча.ДействиеПриОбновлении = ДействиеПриОбновленииЗаписейВнешнейТаблицы;
        this._ДанныеВнешнегоКлюча.ДействиеПриУдалении = ДействиеПриУдаленииЗаписейВнешнейТаблицы;
        this._ДанныеВнешнегоКлюча.ДействиеССуществующимиЗаписями = ДействиеССуществующимиЗаписями;
        return this;
    }

}

class ТаблицаВБД {

    _Имя = '';
    _Колонки = [];
    _Владелец = 'postgres';
    _Схема = 'public';
    _ПоследовательностиДляСоздания = [];

    constructor(Имя, Схема = 'public', Владелец = 'postgres') {
        this._Имя = Имя;
        this._Схема = Схема;
        this._Владелец = Владелец;
        this._Колонки = [];
    }

    ДобавитьКолонку(Имя) {
        const НоваяКолонка = new Колонка(Имя);
        this._Колонки.push(НоваяКолонка);
        return НоваяКолонка;
    }

    static СледующееЗначениеВПоследовательности(ИмяКолонки) {
        const СледующееЗначение = `nextval('${this._Имя}_${ИмяКолонки}_seq'::regclass)`;
        this._ПоследовательностиДляСоздания.push(`${this._Схема}.${this._Имя}_${ИмяКолонки}_seq`);
        return СледующееЗначение;
    }

    ТестЗапросаНаСоздание() {

        let Текст = '';

        for (let текПоследовательность of this._ПоследовательностиДляСоздания) {
            Текст += `CREATE SEQUENCE IF NOT EXISTS ${текПоследовательность}; `;
        }

        Текст += `CREATE TABLE IF NOT EXISTS ${this._Схема}.${this._Имя}( `;

        for (let текКолонка of this._Колонки) {
            Текст += `${текКолонка._Имя} ${текКолонка._Тип} ${текКолонка._ПризнакНеNull ? 'NOT NULL' : ''} ${текКолонка._ЗначениеПоУмолчанию ? ' DEFAULT ' + текКолонка._ЗначениеПоУмолчанию : ''},`;
            Текст += текКолонка._ПризнакЭтоПервичныйКлюч ? `CONSTRAINT ${this._Имя}_pkey PRIMARY KEY (${текКолонка._Имя}),` : '';
            if (текКолонка._ДанныеВнешнегоКлюча.ПризнакВнешегоКлюча) {
                Текст += `CONSTRAINT ${this._Имя}_${текКолонка._Имя}_fkey FOREIGN KEY (${текКолонка._Имя})`;
                Текст += `REFERENCES ${this._Схема}.${текКолонка._ДанныеВнешнегоКлюча.ВнешняяТаблица} (${текКолонка._ДанныеВнешнегоКлюча.КлючВнешнейТаблицы}) MATCH SIMPLE `;
                Текст += `ON UPDATE ${текКолонка._ДанныеВнешнегоКлюча.ДействиеПриОбновлении} `;
                Текст += `ON DELETE ${текКолонка._ДанныеВнешнегоКлюча.ДействиеПриУдалении} `;
                Текст += `${текКолонка._ДанныеВнешнегоКлюча.ДействиеССуществующимиЗаписями},`;
            }
        }

        Текст = Текст.slice(0, -1);

        Текст += ');';

        Текст += this._Владелец ? `ALTER TABLE IF EXISTS ${this._Схема}.${this._Имя} OWNER to ${this._Владелец};` : '';
        Текст += this._Последовательность ? `CREATE SEQUENCE IF NOT EXISTS ${this._Схема}.${this._Имя}_id_seq;` : '';

        return Текст;

    }

}

const НомРа = new ТаблицаВБД('nomenclatures');
НомРа.ДобавитьКолонку("id").Тип(ТипыКолонок.INTEGER).НеNull().ПоУмолчанию(ТаблицаВБД.СледующееЗначениеВПоследовательности("id"));
НомРа.ДобавитьКолонку("name").Тип(ТипыКолонок.TEXT);
НомРа.ДобавитьКолонку("price").Тип(ТипыКолонок.NUMERIC_ТОЧНОСТЬ(10, 2));
НомРа.ДобавитьКолонку("description").Тип(ТипыКолонок.TEXT);
НомРа.ДобавитьКолонку("main_warehouse").Тип(ТипыКолонок.INTEGER);
НомРа.ДобавитьКолонку("type_id").Тип(ТипыКолонок.INTEGER);
НомРа.ДобавитьКолонку("projects_id").Тип(ТипыКолонок.INTEGER);

const Аалоги = new ТаблицаВБД('analoguesOfNomenclature');
Аалоги.ДобавитьКолонку("id").Тип(ТипыКолонок.INTEGER).НеNull().ПоУмолчанию(ТаблицаВБД.СледующееЗначениеВПоследовательности('id')).ЭтоПервичныйКлюч();
Аалоги.ДобавитьКолонку("nomenclature_id").Тип(ТипыКолонок.INTEGER).НеNull().ЭтоВнешнийКлюч(true, НомРа, 'id', ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия, ДействияПриИзмененииГлавнойВнешнейТаблицы.Ограничевать);
Аалоги.ДобавитьКолонку("analogue_id").Тип(ТипыКолонок.INTEGER).ЭтоВнешнийКлюч(true, НомРа, 'id', ДействияПриИзмененииГлавнойВнешнейТаблицы.НетДействия, ДействияПриИзмененииГлавнойВнешнейТаблицы.Ограничевать);;

console.log(ТаблицаВБД.СледующееЗначениеВПоследовательности("id"));